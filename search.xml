<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[How to use python absolute import in package?]]></title>
      <url>/2017/04/12/python-absolute-import/</url>
      <content type="html"><![CDATA[<p>I had been confused for quite a long time about how python absolute import works.</p>
<p>Why should we use absolute import? The <a href="https://www.python.org/dev/peps/pep-0328/#rationale-for-absolute-imports" target="_blank" rel="external">rationale</a> maybe:<br><blockquote><p>In Python 2.4 and earlier, if you’re reading a module located inside a package, it is not clear whether </p>
<pre><code>import foo
</code></pre><p>refers to a top-level module or to another module inside the package. As Python’s library expands, more and more existing package internal modules suddenly shadow standard library modules by accident. It’s a particularly difficult problem inside packages because there’s no way to specify which module is meant. To resolve the ambiguity, it is proposed that foo will always be a module or package reachable from sys.path . This is called an absolute import.</p>
</blockquote></p>
<p>As absolute import includes the namesapce for the imported package, users can also get a better understading for what this package does. And it’s always a good habit to avoid name comflicts in a complicated project.</p>
<p>Okay, so how to use it? Is there any “hello world” demo I can try it out? I found a changelog(<a href="https://docs.python.org/2.5/whatsnew/pep-328.html" target="_blank" rel="external">more details</a>) about absolute import when python2.5 distributed, alongside with a easy example:</p>
<pre><code>pkg/
pkg/__init__.py
pkg/main.py
pkg/string.py
</code></pre><p><code>main.py</code> is<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</div><div class="line"><span class="keyword">from</span> pkg <span class="keyword">import</span> string</div><div class="line">print(string)</div><div class="line">string.sayHello()</div></pre></td></tr></table></figure><br>Note that we can use <code>from __future__ import absolute_import</code> to obtain absolute import if you running python2.*.</p>
<p><code>string.py</code> is<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'Hello World!'</span>)</div></pre></td></tr></table></figure><br>and leave <code>__init__.py</code> empty.</p>
<p>When you run <code>python main.py</code> in terminal or in an IDE, it would come across an ERROR, <code>ImportError: No module named pkg</code>. This seems weird, we do exactly as the example says, why doesn’t it work?</p>
<p>There is something not clear with the changelog, or you should have some extra knowledge about <a href="https://docs.python.org/3/reference/import.html" target="_blank" rel="external">python import system</a>. Absolute import actually finds top-level module or package reachable from <code>sys.path</code>. So we ran across <code>ImportError</code> because our custom package path not in the <code>sys.path</code>. </p>
<p>In order to fix this, we can either <code>cd</code> to package folder and run as</p>
<pre><code>python -m pkg.main
</code></pre><p>or add our custom package to PYTHONPATH. In a big project, I suggest add our package path in <code>.bashrc</code>(<code>.bash_profile</code> in Mac) eg:</p>
<pre><code>export PYTHONPATH=&quot;your/project/package/:$PYTHONPATH&quot;
</code></pre><p> or write a script every time you want to use this package, then source that script.</p>
<p>In addition, there is also something not so right with the changelog as follows:<br><blockquote><p>In Python 2.5, you can switch import’s behaviour to absolute imports using a from <strong>future</strong> import absolute_import directive. This absolute-import behaviour will become the default in a future version (probably Python 2.7). Once absolute imports are the default, import string will always find the standard library’s version.</p>
</blockquote><br><code>import string</code> would point to the <code>string.py</code> file in current foler, and would not import string from standard library. Because absolute import <strong>finds top-level module or package reachable from <code>sys.path</code>, and current folder path always the first element in the <code>sys.path</code>.</strong> More details you can find in <a href="http://stackoverflow.com/questions/33743880/what-does-from-future-import-absolute-import-actually-do" target="_blank" rel="external">this stackoverflow link</a>.</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> absolute-import </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>Hello, it’s Jianyun Xu. Welcome to my blog.</p>
<p>Enthuastic with self-driving car, machine learning and data science.<br>I use python mostly, also some c++ with Ros.</p>
<p>大家好，我叫徐建云，欢迎大家来到我的技术博客。</p>
<p>热爱自动驾驶，目前钻研机器学习和数据挖掘。我基本用python写代码，当然也会在Ros下用c++写一些东西。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
