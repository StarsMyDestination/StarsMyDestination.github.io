{"meta":{"title":"Stars My Destination","subtitle":null,"description":"THE BEST WAY TO PREDICT FUTURE IS TO CREATE IT!","author":"Jianyun Xu","url":"http://yoursite.com"},"pages":[{"title":"Reading","date":"2017-04-14T15:18:09.000Z","updated":"2017-04-14T15:18:09.000Z","comments":true,"path":"reading/index.html","permalink":"http://yoursite.com/reading/index.html","excerpt":"","text":""},{"title":"About","date":"2017-04-13T06:52:00.000Z","updated":"2017-04-13T06:41:59.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Hello, it’s Jianyun Xu. Welcome to my blog. Enthuastic with self-driving car, machine learning and data science.I use python mostly, also some c++ with Ros. 大家好，我叫徐建云，欢迎大家来到我的技术博客。 热爱自动驾驶，目前钻研机器学习和数据挖掘。我基本用python写代码，当然也会在Ros下用c++写一些东西。"}],"posts":[{"title":"使用Markdown写简历","slug":"Markdown 写简历","date":"2017-04-15T16:00:00.000Z","updated":"2017-04-16T13:28:57.000Z","comments":true,"path":"2017/04/16/Markdown 写简历/","link":"","permalink":"http://yoursite.com/2017/04/16/Markdown 写简历/","excerpt":"转眼就要毕业，以前用学校模版写的简历现在看着怎觉得不顺眼，想着是不是可以用Markdown重新写一个。但是markdown的默认排版显然不够看的，可以用pandoc润色下，还能导出许多格式。但是自己一步步做挺麻烦的，还是去网上找模版吧，嘿哈～","text":"转眼就要毕业，以前用学校模版写的简历现在看着怎觉得不顺眼，想着是不是可以用Markdown重新写一个。但是markdown的默认排版显然不够看的，可以用pandoc润色下，还能导出许多格式。但是自己一步步做挺麻烦的，还是去网上找模版吧，嘿哈～ 万事Google起直接看图片找吧，直接点。我从中圈出了几个自己看着还挺合适的，图片点进去一般都能找到相应的github仓库。就选这个吧！这是其github。 使用模版制作简历参照github说明，先安装dependencies，ubuntu底下可以使用 1sudo apt-get install pandoc context 然后 1234git clone https://github.com/mszep/pandoc_resumecd pandoc_resumevim resume.md #insert your own resume infomake 便可以生成模版里面的简历。 接下去修改模版里的内容，英文简历改完后直接编译就可以。而中文简历修改完后可以成功编译但是pdf中中文不能正常显示，但是html可以正常显示中文，一个不是很完美的方案就是从html打印，另存为pdf。 下面这是我的简历截图： resume-zh resume-en 很遗憾这个简历没有照片，自己加的话貌似很麻烦，想要照片都是可以用这个模版。","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"},{"name":"简历","slug":"简历","permalink":"http://yoursite.com/tags/简历/"}]},{"title":"How to use python absolute import in package?","slug":"python-absolute-import","date":"2017-04-11T16:00:00.000Z","updated":"2017-04-13T08:32:10.000Z","comments":true,"path":"2017/04/12/python-absolute-import/","link":"","permalink":"http://yoursite.com/2017/04/12/python-absolute-import/","excerpt":"When you work on a complicated python project, there are many custom packages. In order to manage these packages and avoid shadowing stardand libary, we intend to use absolute import. But there are something you should be careful when you use it.","text":"When you work on a complicated python project, there are many custom packages. In order to manage these packages and avoid shadowing stardand libary, we intend to use absolute import. But there are something you should be careful when you use it. Python absolute importAbsolute importI had been confused for quite a long time about how python absolute import works. Why should we use absolute import? The rationale maybe:In Python 2.4 and earlier, if you’re reading a module located inside a package, it is not clear whether import foo refers to a top-level module or to another module inside the package. As Python’s library expands, more and more existing package internal modules suddenly shadow standard library modules by accident. It’s a particularly difficult problem inside packages because there’s no way to specify which module is meant. To resolve the ambiguity, it is proposed that foo will always be a module or package reachable from sys.path . This is called an absolute import. As absolute import includes the namesapce for the imported package, users can also get a better understading for what this package does. And it’s always a good habit to avoid name comflicts in a complicated project. Use in custom packageOkay, so how to use it? Is there any “hello world” demo I can try it out? I found a changelog(more details) about absolute import when python2.5 distributed, alongside with a easy example: pkg/ pkg/__init__.py pkg/main.py pkg/string.py main.py is 1234from __future__ import absolute_importfrom pkg import stringprint(string)string.sayHello() Note that we can use from __future__ import absolute_import to obtain absolute import if you are running python2.* . string.py is 12def sayHello(): print('Hello World!') and leave __init__.py empty. When you run python main.py in terminal or in an IDE, it would come across an ERROR, ImportError: No module named pkg. This seems weird, we do exactly as the example says, why doesn’t it work? There is something not clear with the changelog, or you should have some extra knowledge about python import system. Absolute import actually finds top-level module or package reachable from sys.path. So we ran across ImportError because our custom package path not in the sys.path. In order to fix this, we can either cd to package folder and run as python -m pkg.main or add our custom package to PYTHONPATH. In a big project, I suggest add our package path in .bashrc(.bash_profile in Mac) eg: export PYTHONPATH=&quot;your/project/package/:$PYTHONPATH&quot; or write a script every time you want to use this package, then source that script. Additional issueIn addition, there is also something not so right with the changelog as follows:In Python 2.5, you can switch import’s behaviour to absolute imports using a from future import absolute_import directive. This absolute-import behaviour will become the default in a future version (probably Python 2.7). Once absolute imports are the default, import string will always find the standard library’s version. import string would point to the string.py file in current foler, and would not import string from standard library. Because absolute import finds top-level module or package reachable from sys.path, and current folder path always the first element in the sys.path. More details you can find in this stackoverflow link.","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Absolute-Import","slug":"Absolute-Import","permalink":"http://yoursite.com/tags/Absolute-Import/"}]},{"title":"Welcome To Hexo","slug":"hello-world","date":"2014-02-22T16:00:00.000Z","updated":"2017-04-13T08:03:56.000Z","comments":true,"path":"2014/02/23/hello-world/","link":"","permalink":"http://yoursite.com/2014/02/23/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Welcome","slug":"Welcome","permalink":"http://yoursite.com/tags/Welcome/"},{"name":"How-To","slug":"How-To","permalink":"http://yoursite.com/tags/How-To/"}]}]}