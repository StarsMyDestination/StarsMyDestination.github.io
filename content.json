{"meta":{"title":"Stars My Destination","subtitle":null,"description":"THE BEST WAY TO PREDICT FUTURE IS TO CREATE IT!","author":"Jianyun Xu","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2017-04-13T02:30:37.000Z","updated":"2017-04-13T02:25:54.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"大家好，我是XXX。欢迎来到我的个人技术博客。 这里用markdown写下你的简介，就跟平时写md一样就可以了。"},{"title":"读书","date":"2017-04-13T02:30:37.000Z","updated":"2017-04-13T02:25:54.000Z","comments":true,"path":"reading/index.html","permalink":"http://yoursite.com/reading/index.html","excerpt":"","text":""}],"posts":[{"title":"How to use python absolute import in package?","slug":"python-absolute-import","date":"2017-04-11T16:08:51.000Z","updated":"2017-04-13T03:33:17.000Z","comments":true,"path":"2017/04/12/python-absolute-import/","link":"","permalink":"http://yoursite.com/2017/04/12/python-absolute-import/","excerpt":"","text":"I had been confused for quite a long time about how python absolute import works. Why should we use absolute import? The rationale maybe:In Python 2.4 and earlier, if you’re reading a module located inside a package, it is not clear whether import foo refers to a top-level module or to another module inside the package. As Python’s library expands, more and more existing package internal modules suddenly shadow standard library modules by accident. It’s a particularly difficult problem inside packages because there’s no way to specify which module is meant. To resolve the ambiguity, it is proposed that foo will always be a module or package reachable from sys.path . This is called an absolute import. As absolute import includes the namesapce for the imported package, users can also get a better understading for what this package does. And it’s always a good habit to avoid name comflicts in a complicated project. Okay, so how to use it? Is there any “hello world” demo I can try it out? I found a changelog(more details) about absolute import when python2.5 distributed, alongside with a easy example: pkg/ pkg/__init__.py pkg/main.py pkg/string.py main.py is1234from __future__ import absolute_importfrom pkg import stringprint(string)string.sayHello()Note that we can use from __future__ import absolute_import to obtain absolute import if you running python2.*. string.py is12def sayHello(): print('Hello World!')and leave __init__.py empty. When you run python main.py in terminal or in an IDE, it would come across an ERROR, ImportError: No module named pkg. This seems weird, we do exactly as the example says, why doesn’t it work? There is something not clear with the changelog, or you should have some extra knowledge about python import system. Absolute import actually finds top-level module or package reachable from sys.path. So we ran across ImportError because our custom package path not in the sys.path. In order to fix this, we can either cd to package folder and run as python -m pkg.main or add our custom package to PYTHONPATH. In a big project, I suggest add our package path in .bashrc(.bash_profile in Mac) eg: export PYTHONPATH=&quot;your/project/package/:$PYTHONPATH&quot; or write a script every time you want to use this package, then source that script. In addition, there is also something not so right with the changelog as follows:In Python 2.5, you can switch import’s behaviour to absolute imports using a from future import absolute_import directive. This absolute-import behaviour will become the default in a future version (probably Python 2.7). Once absolute imports are the default, import string will always find the standard library’s version. import string would point to the string.py file in current foler, and would not import string from standard library. Because absolute import finds top-level module or package reachable from sys.path, and current folder path always the first element in the sys.path. More details you can find in this stackoverflow link.","categories":[],"tags":[{"name":"python, absolute-import","slug":"python-absolute-import","permalink":"http://yoursite.com/tags/python-absolute-import/"}]}]}